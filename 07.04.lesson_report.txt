7/4 강의 정리

파이썬 프로그래밍1

변수와 자료형
- 변수: 데이터를 저장하는 메모리 공간 명명
- 자료형: 변수가 갖는 데이터 종류
   숫자형: int, float
   문자열: str
   불린형: bool(T/F)
- 자료형 변환: '자료형' + ()

- 기본연산: 산술/비교/논리연산(비교연산은 숫자형이 아니더라도 가능)
- 조건문: 특정조건에 따라 코드블록을 실행
   if(조건이 참) - elif(다른 조건이 참) - else(조건이 거짓)
- 반복문: 코드블록을 조건/시퀀스에 맞춰 여러번 실행
   for + range, while, break, continue

함수
   재사용가능한 코드의 가독성/유지보수성 증가, 모드 중복 감소 -> 모듈화된 코드 작성
    def 함수이름(매개변수):
          코드블록
          return 반환값

- 람다함수
   한줄로 작성가능한 익명함수, 간단한 연산/데이터 변환에 유용 -> 코드간결화
   lambda 매개변수: 반환값

- *args(가변인자): 여러 개 인자를 함수에 전달시 사용, 튜플
-**kwargs(키워드 가변인자): 키워드 인자 함수에 전달시 사용, 딕셔너리
-> 유연설계, 다양한 함수 호출 패턴가능

함수형 프로그래밍: 함수를 일급 객체로 사용(함수의 인자로 함수 사용할 수 있음)
1) map 함수: 모든 요소에 함수를 적용 ->새로운 리스트 반환
2) filter 함수: 조건에 맞는 요소만 거름 ->새로운 리스트 반환
3) reduce 함수: 모든 요소 누적 -> 단일 값 반환, functools 모듈 제공
-> 코드를 간결화, 대규모 데이터 처리에 유용, 실무에서 데이터 파이프라인 구축 시 자주 사용

객체지향 프로그래밍 
객체(Object)를 중심으로 프로그램을 구성하는 프로그래밍 패러다임 
1) 추상화 (Abstraction): 중요한 정보만 표현, 불필요한 세부 사항 숨기는 것. 
2) 캡슐화 (Encapsulation): 데이터와 메서드를 하나의 단위로 묶고 외부로부터 숨기는 것. 
3) 상속 (Inheritance): 기존 클래스(부모 클래스)를 기반으로 새로운 클래스(자식 클래스)를 정의하는 것. 
4) 다형성 (Polymorphism): 동일한 인터페이스를 사용하여 서로 다른 데이터 타입의 객체를 다루는 것. 
객체지향 프로그래밍의 장점 
• 코드 재사용성: 기존 코드를 재사용하여 새로운 프로그램을 쉽게 개발. 
• 코드 유지보수성: 모듈화된 코드 구조로 인해 유지보수가 용이. 
• 확장성: 새로운 기능 추가 시 기존 코드를 수정하지 않고 확장 가능.

클래스: 객체를 정의하는 데 사용되는 청사진, 속성(attributes)과 메서드(methods)로 구성 
객체지향 프로그래밍(OOP)의 기본 단위로, 코드의 재사용성, 확장성, 유지보수성을 높임 
‘class’ 키워드를 사용하여 정의 

인스턴스 
• 클래스는 객체를 생성하기 위한 템플릿 
• 인스턴스는 클래스의 실제 예제 
• 클래스를 사용하여 여러 객체를 효율적으로 생성하고 관리할 수 있

상속 (Inheritance) 
기존 클래스(부모 클래스)를 기반으로 새로운 클래스(자식 클래스)를 정의하는 것 
코드의 재사용성을 높이고, 계층적 관계를 명확히 함 
class 부모클래스:
class 자식클래스(부모클래스):

다형성 (Polymorphism) 
동일한 인터페이스를 사용하여 서로 다른 데이터 타입의 객체를 다룰 수 있는 능력 
코드의 유연성과 확장성을 높임

매직 메서드 (Magic Methods) 
• 특별한 이름을 가진 메서드로, 파이썬이 내부적으로 사용하는 메서드 
• 객체의 특정 동작을 사용자 정의할 수 있음 
• 대표적인 매직 메서드: 
◦ __init__: 객체 초기화 메서드 
◦ __str__: 객체의 문자열 표현을 반환 
◦ __repr__: 객체의 공식 문자열 표현을 반환 

연산자 오버로딩 (Operator Overloading) 
• 파이썬의 기본 연산자를 사용자 정의 클래스에서 사용할 수 있도록 메서드를 정의 
• 객체 간의 연산을 직관적으로 표현 가능 
대표적인 매직 메서드: 
• add : + 연산자 
• sub : - 연산자 
• mul : * 연산자 
• truediv : / 연산자

이터레이터 (Iterator) 
● __iter__()와 __next__() 메서드를 구현한 객체 
● 반복자: 반복 가능한 객체에서 값을 순차적으로 꺼내는 역할 
● 상태 유지: 현재 위치를 기억하여 next() 호출 시 다음 값을 반환 

제너레이터 (generator) 
● 일련의 값을 생성하는 이터레이터의 일종으로 함수처럼 정의되지만, 값을 반환할 때 return 대신 yield 키워드를 사용 
● 지연 평가 (Lazy Evaluation): 필요한 시점에 값을 생성. 
● 상태 유지: 마지막 실행 지점에서 멈추고 상태를 기억하여 다음 호출 시 그 지점부터 재개. 
● 메모리 효율성: 한 번에 하나의 값만 생성하므로 메모리 사용을 최소화. 
● 이터레이터의 특별한 형태: 제너레이터도 이터레이터이므로 __iter__()와 __next__()를 자동으로 구현. 
● 코드 간결화: 복잡한 이터레이터 코드를 간단히 작성 가능

구현 방식: 
• 이터레이터: 클래스 형태로 __iter__()와 __next__() 메서드를 구현 
• 제너레이터: 함수 형태로 yield 키워드를 사용 
사용 용이성: 
• 이터레이터: 상대적으로 복잡한 구조 
• 제너레이터: 간단한 코드로 구현 가능 
메모리 효율성: 
• 이터레이터: 모든 값을 메모리에 저장 
• 제너레이터: 값을 필요할 때마다 생성

yield 키워드 
• 제너레이터 함수에서 값을 반환하고 함수의 실행 상태를 일시 중지 
◦ 지연 평가: yield 키워드를 만나면 값을 반환하고 함수의 실행 상태를 저장 
◦ 상태 유지: 다음 호출 시 저장된 상태에서 다시 시작 
필요성 
• 메모리 절약: 한 번에 하나의 값만 생성하여 메모리 사용을 최소화 
• 복잡한 흐름 제어: 제너레이터를 사용하여 복잡한 반복 작업을 간단히 구현 
활용 
• 대량 데이터 처리: 대규모 파일 읽기, 대규모 데이터베이스 쿼리 결과 처리 등 
• 스트리밍 데이터 처리: 실시간 데이터 스트리밍에서 유용

파일 입출력의 개념 
● 파일 시스템을 통해 데이터를 읽고 쓰는 작업. 
● 데이터 영속성 유지, 외부 데이터 소스와의 연동, 대용량 데이터 처리 등에 필수적 
with 문 
● 자원 관리가 필요한 코드 블록에서 사용되는 구문 
● 코드의 가독성과 안전성을 높이며, 자원 해제를 자동으로 처리하여 코드의 안정성을 보장 
● 파일을 열고 닫는 작업을 자동으로 처리 
● 예외 발생 시에도 파일이 제대로 닫히도록 보장 
Open 함수 
● 파일을 열고 파일 객체를 반환하는 함수

모드 
● 'r': 읽기 모드 (기본값) 
● 'w': 쓰기 모드 (파일이 존재하면 덮어씀) 
● 'a': 추가 모드 (파일 끝에 데이터 추가) 
● 'b': 이진 모드 (예: 'rb', 'wb') 
읽기 함수 
● read(): 파일 전체를 읽어들임 
● readline(): 한 줄씩 읽어들임 
● readlines(): 파일 전체를 읽어 각 줄을 요소로 하는 리스트 반환 
쓰기 함수 
● write(): 문자열을 파일에 씀 
● writelines(): 문자열 리스트를 파일에 씀



실습과제
1. 파이썬 프로그래밍 종합실습
2. 매일 알고리즘 문제풀기